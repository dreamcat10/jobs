{"remainingRequest":"D:\\H5\\project\\HBuilderProjects\\jobs\\node_modules\\babel-loader\\lib\\index.js!D:\\H5\\project\\HBuilderProjects\\jobs\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\H5\\project\\HBuilderProjects\\jobs\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\H5\\project\\HBuilderProjects\\jobs\\src\\App.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\H5\\project\\HBuilderProjects\\jobs\\src\\App.vue","mtime":1678174877673},{"path":"D:\\H5\\project\\HBuilderProjects\\jobs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1673771979702},{"path":"D:\\H5\\project\\HBuilderProjects\\jobs\\node_modules\\babel-loader\\lib\\index.js","mtime":1673772004305},{"path":"D:\\H5\\project\\HBuilderProjects\\jobs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1673771979702},{"path":"D:\\H5\\project\\HBuilderProjects\\jobs\\node_modules\\vue-loader\\lib\\index.js","mtime":1673772000036}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.map\";\n//\n//\n//\n//\n//\n//\nimport { chatRooms } from \"@/network/chat.js\";\nimport { createWebSocket } from \"@/api/websocket.js\";\nexport default {\n  name: 'app',\n  created: function created() {\n    var emp = sessionStorage.getItem(\"empInfo\");\n\n    if (emp != null) {\n      emp = JSON.parse(emp);\n      createWebSocket(this.callback, emp.id);\n      console.log(1);\n      this.chat(emp.id);\n    }\n  },\n  data: function data() {\n    return {\n      logMap: []\n    };\n  },\n  methods: {\n    callback: function callback(msg) {\n      this.logMap = this.$store.getters.getLogs;\n      this.logMap.map(function (item) {\n        if (msg.chatRoomId == item.roomId) {\n          item.logs.push(msg);\n        }\n      });\n      this.$store.commit('SET_CHATLOGS', this.logMap);\n    },\n    chat: function chat(id) {\n      var _this = this;\n\n      chatRooms(id).then(function (res) {\n        var data = res.data;\n\n        if (data.code == 200) {\n          var rooms = data.data;\n\n          _this.$store.commit('SET_CHATROOMS', rooms);\n\n          rooms.map(function (item) {\n            var log = {\n              roomId: '',\n              logs: []\n            };\n            log.roomId = item.id, log.logs = [];\n\n            _this.logMap.push(log);\n          });\n\n          _this.$store.commit('SET_CHATLOGS', _this.logMap);\n        } else {\n          console.log(\"获取聊天室信息失败\");\n        }\n      });\n    }\n  }\n};",{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;AAOA,SAAA,SAAA,QAAA,mBAAA;AACA,SAAA,eAAA,QAAA,oBAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,KADA;AAEA,EAAA,OAFA,qBAEA;AACA,QAAA,GAAA,GAAA,cAAA,CAAA,OAAA,CAAA,SAAA,CAAA;;AACA,QAAA,GAAA,IAAA,IAAA,EAAA;AACA,MAAA,GAAA,GAAA,IAAA,CAAA,KAAA,CAAA,GAAA,CAAA;AACA,MAAA,eAAA,CAAA,KAAA,QAAA,EAAA,GAAA,CAAA,EAAA,CAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,CAAA;AACA,WAAA,IAAA,CAAA,GAAA,CAAA,EAAA;AACA;AACA,GAVA;AAYA,EAAA,IAZA,kBAYA;AACA,WAAA;AACA,MAAA,MAAA,EAAA;AADA,KAAA;AAGA,GAhBA;AAiBA,EAAA,OAAA,EAAA;AACA,IAAA,QADA,oBACA,GADA,EACA;AACA,WAAA,MAAA,GAAA,KAAA,MAAA,CAAA,OAAA,CAAA,OAAA;AACA,WAAA,MAAA,CAAA,GAAA,CAAA,UAAA,IAAA,EAAA;AACA,YAAA,GAAA,CAAA,UAAA,IAAA,IAAA,CAAA,MAAA,EAAA;AACA,UAAA,IAAA,CAAA,IAAA,CAAA,IAAA,CAAA,GAAA;AACA;AACA,OAJA;AAKA,WAAA,MAAA,CAAA,MAAA,CAAA,cAAA,EAAA,KAAA,MAAA;AACA,KATA;AAUA,IAAA,IAVA,gBAUA,EAVA,EAUA;AAAA;;AACA,MAAA,SAAA,CAAA,EAAA,CAAA,CAAA,IAAA,CAAA,UAAA,GAAA,EAAA;AACA,YAAA,IAAA,GAAA,GAAA,CAAA,IAAA;;AACA,YAAA,IAAA,CAAA,IAAA,IAAA,GAAA,EAAA;AACA,cAAA,KAAA,GAAA,IAAA,CAAA,IAAA;;AACA,UAAA,KAAA,CAAA,MAAA,CAAA,MAAA,CAAA,eAAA,EAAA,KAAA;;AACA,UAAA,KAAA,CAAA,GAAA,CAAA,UAAA,IAAA,EAAA;AACA,gBAAA,GAAA,GAAA;AACA,cAAA,MAAA,EAAA,EADA;AAEA,cAAA,IAAA,EAAA;AAFA,aAAA;AAIA,YAAA,GAAA,CAAA,MAAA,GAAA,IAAA,CAAA,EAAA,EACA,GAAA,CAAA,IAAA,GAAA,EADA;;AAEA,YAAA,KAAA,CAAA,MAAA,CAAA,IAAA,CAAA,GAAA;AACA,WARA;;AASA,UAAA,KAAA,CAAA,MAAA,CAAA,MAAA,CAAA,cAAA,EAAA,KAAA,CAAA,MAAA;AACA,SAbA,MAaA;AACA,UAAA,OAAA,CAAA,GAAA,CAAA,WAAA;AACA;AACA,OAlBA;AAmBA;AA9BA;AAjBA,CAAA","sourcesContent":["<template>\n  <keep-alive>\r\n        <router-view />\r\n </keep-alive>\n</template>\n\n<script>\r\nimport {chatRooms} from \"@/network/chat.js\"\r\nimport {createWebSocket} from \"@/api/websocket.js\"\r\n\nexport default {\n  name: 'app',\r\n  created() {\r\n\t let emp = sessionStorage.getItem(\"empInfo\")\r\n  \tif(emp != null){\r\n\t    emp = JSON.parse(emp);\r\n\t\tcreateWebSocket(this.callback, emp.id)\r\n\t\tconsole.log(1)\r\n\t\tthis.chat(emp.id)\r\n\t}\r\n  },\r\n\r\n  data(){\r\n\t  return{\r\n\t\t  logMap: [],\r\n\t  }\r\n  },\n  methods: {\n\t  callback(msg){\r\n\t\tthis.logMap = this.$store.getters.getLogs\r\n\t\tthis.logMap.map(item => {\r\n\t\t\tif(msg.chatRoomId == item.roomId){\r\n\t\t\t\titem.logs.push(msg)\r\n\t\t\t}\r\n\t\t})\r\n\t\tthis.$store.commit('SET_CHATLOGS',this.logMap);\r\n\t  },\r\n\t  chat(id){\r\n\t\tchatRooms(id).then(res => {\r\n\t\t\tlet data = res.data\r\n\t\t\tif(data.code == 200){\r\n\t\t\t\tlet rooms = data.data\r\n\t\t\t\tthis.$store.commit('SET_CHATROOMS',rooms);\r\n\t\t\t\trooms.map(item => {\r\n\t\t\t\t\tlet log = {\r\n\t\t\t\t\t\troomId: '',\r\n\t\t\t\t\t\tlogs: []\r\n\t\t\t\t\t};\r\n\t\t\t\t\tlog.roomId = item.id,\r\n\t\t\t\t\tlog.logs = []\r\n\t\t\t\t\tthis.logMap.push(log)\r\n\t\t\t\t})\r\n\t\t\t\tthis.$store.commit('SET_CHATLOGS',this.logMap);\r\n\t\t\t}else{\r\n\t\t\t\tconsole.log(\"获取聊天室信息失败\")\r\n\t\t\t}\r\n\t\t})\r\n\t  },\n  }\n}\n</script>\n\n<style>\r\n\t@import \"./assets/css/font.css\";\r\n\t@import \"./assets/css/global.css\";\r\n\tbody{\r\n\t\theight: 100vh;\r\n\t\tmargin: 0;\r\n\t}\r\n\t\n</style>\n\n"],"sourceRoot":"src"}]}