{"remainingRequest":"D:\\H5\\project\\HBuilderProjects\\jobs\\node_modules\\babel-loader\\lib\\index.js!D:\\H5\\project\\HBuilderProjects\\jobs\\src\\api\\websocket.js","dependencies":[{"path":"D:\\H5\\project\\HBuilderProjects\\jobs\\src\\api\\websocket.js","mtime":1676529451514},{"path":"D:\\H5\\project\\HBuilderProjects\\jobs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1673771979702},{"path":"D:\\H5\\project\\HBuilderProjects\\jobs\\node_modules\\babel-loader\\lib\\index.js","mtime":1673772004305}],"contextDependencies":[],"result":["import _typeof from \"D:\\\\H5\\\\project\\\\HBuilderProjects\\\\jobs\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/typeof\";\nvar websock = null;\nvar global_callback = null;\nvar serverPort = \"8848\"; // webSocket连接端口\n// var host = \"120.77.203.139\";\n\nvar host = \"localhost\"; // var wsuri = \"ws://\" + host + '/imServer/';\n\nvar wsuri = \"ws://\" + host + ':' + serverPort + '/imServer/';\n\nfunction createWebSocket(callback, id) {\n  if (websock == null || _typeof(websock) !== WebSocket) {\n    initWebSocket(callback, id);\n  }\n}\n\nfunction initWebSocket(callback, id) {\n  global_callback = callback; // 初始化websocket\n\n  websock = new WebSocket(wsuri + id);\n  window.websock = websock;\n\n  websock.onmessage = function (e) {\n    websocketonmessage(e);\n  };\n\n  websock.onclose = function (e) {\n    websocketclose(e);\n  };\n\n  websock.onopen = function () {\n    websocketOpen();\n  }; // 连接发生错误的回调方法\n\n\n  websock.onerror = function () {\n    console.log(\"WebSocket连接发生错误\"); //createWebSocket();啊，发现这样写会创建多个连接，加延时也不行\n  };\n} // 实际调用的方法\n\n\nfunction sendSock(agentData) {\n  if (websock.readyState === websock.OPEN) {\n    // 若是ws开启状态\n    websocketsend(agentData);\n  } else if (websock.readyState === websock.CONNECTING) {\n    // 若是 正在开启状态，则等待1s后重新调用\n    setTimeout(function () {\n      sendSock(agentData);\n    }, 1000);\n  } else {\n    // 若未开启 ，则等待1s后重新调用\n    setTimeout(function () {\n      sendSock(agentData);\n    }, 1000);\n  }\n}\n\nfunction closeSock() {\n  websock.close();\n} // 数据接收\n\n\nfunction websocketonmessage(msg) {\n  // console.log(\"收到数据：\"+msg.data);\n  // global_callback(JSON.parse(msg.data));\n  // 收到信息为Blob类型时\n  var result = null; // debugger\n\n  if (msg.data instanceof Blob) {\n    var reader = new FileReader();\n    reader.readAsText(msg.data, \"UTF-8\");\n\n    reader.onload = function (e) {\n      result = JSON.parse(reader.result);\n      console.log(\"websocket收到\", result);\n      global_callback(result);\n    };\n  } else {\n    result = JSON.parse(msg.data);\n    console.log(\"websocket收到\", result);\n    global_callback(result);\n  }\n} // 数据发送\n\n\nfunction websocketsend(agentData) {\n  console.log(\"发送数据：\" + agentData);\n  websock.send(agentData);\n} // 关闭\n\n\nfunction websocketclose(e) {\n  console.log(\"connection closed (\" + e.code + \")\");\n}\n\nfunction websocketOpen(e) {\n  websock.send('接收消息');\n  console.log(\"连接打开\");\n}\n\nexport { sendSock, createWebSocket, closeSock };",{"version":3,"sources":["D:\\H5\\project\\HBuilderProjects\\jobs\\src\\api\\websocket.js"],"names":["websock","global_callback","serverPort","host","wsuri","createWebSocket","callback","id","WebSocket","initWebSocket","window","onmessage","e","websocketonmessage","onclose","websocketclose","onopen","websocketOpen","onerror","console","log","sendSock","agentData","readyState","OPEN","websocketsend","CONNECTING","setTimeout","closeSock","close","msg","result","data","Blob","reader","FileReader","readAsText","onload","JSON","parse","send","code"],"mappings":"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","sourcesContent":["var websock = null;\n\nvar global_callback = null;\nvar serverPort = \"8848\"; // webSocket连接端口\r\n// var host = \"120.77.203.139\";\r\nvar host = \"localhost\";\n// var wsuri = \"ws://\" + host + '/imServer/';\r\nvar wsuri = \"ws://\" + host + ':' + serverPort + '/imServer/';\n\nfunction createWebSocket(callback,id) {\n\n  if (websock == null || typeof websock !== WebSocket) {\n      initWebSocket(callback,id);\n  } \n}\n\nfunction initWebSocket(callback,id) {\n  global_callback = callback;\n  // 初始化websocket\n  websock = new WebSocket(wsuri + id);\r\n  window.websock = websock;\n  websock.onmessage = function (e) {\n    websocketonmessage(e);\n  };\n  websock.onclose = function (e) {\n    websocketclose(e);\n  };\n  websock.onopen = function () {\n    websocketOpen();\n  };\n\n  // 连接发生错误的回调方法\n  websock.onerror = function () {\n    console.log(\"WebSocket连接发生错误\");\n     //createWebSocket();啊，发现这样写会创建多个连接，加延时也不行\n  };\n}\n\n// 实际调用的方法\nfunction sendSock(agentData ) {\n  \n  if (websock.readyState === websock.OPEN) {\n    // 若是ws开启状态\n    websocketsend(agentData);\n  } else if (websock.readyState === websock.CONNECTING) {\n    // 若是 正在开启状态，则等待1s后重新调用\n    setTimeout(function () {\n      sendSock(agentData);\n    }, 1000);\n  } else {\n    // 若未开启 ，则等待1s后重新调用\n    setTimeout(function () {\n      sendSock(agentData);\n    }, 1000);\n  }\n}\n\nfunction closeSock() {\n  websock.close();\n}\n\n// 数据接收\nfunction websocketonmessage(msg) {\n  // console.log(\"收到数据：\"+msg.data);\n\n  // global_callback(JSON.parse(msg.data));\n\n  // 收到信息为Blob类型时\n  let result = null;\n  // debugger\n  if (msg.data instanceof Blob) {\n    const reader = new FileReader();\n    reader.readAsText(msg.data, \"UTF-8\");\n    reader.onload = (e) => {\n      result = JSON.parse(reader.result);\n      console.log(\"websocket收到\", result);\n      global_callback(result);\n    };\n  } else {\n    result = JSON.parse(msg.data);\n    console.log(\"websocket收到\", result);\n    global_callback(result);\n  }\n}\n\n// 数据发送\nfunction websocketsend(agentData) {\n  console.log(\"发送数据：\" + agentData);\n  websock.send(agentData);\n}\n\n// 关闭\nfunction websocketclose(e) {\n  console.log(\"connection closed (\" + e.code + \")\");\n}\n\nfunction websocketOpen(e) {\r\n\twebsock.send('接收消息')\n    console.log(\"连接打开\");\n}\n\nexport { sendSock, createWebSocket, closeSock };\n\n"]}]}